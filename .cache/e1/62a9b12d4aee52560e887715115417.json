{"id":"delta.js","dependencies":[{"name":"/Users/liaozezhen/Projects/delta/package.json","includedInParent":true,"mtime":1597556373031},{"name":"../src/Delta","loc":{"line":1,"column":18},"parent":"/Users/liaozezhen/Projects/delta/workbench/delta.js","resolved":"/Users/liaozezhen/Projects/delta/src/Delta.ts"}],"generated":{"js":"\"use strict\";\n\nvar _Delta = _interopRequireDefault(require(\"../src/Delta\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"delta.js","original":{"line":1,"column":0}}],"sources":{"delta.js":"import Delta from '../src/Delta'; // 1\n\n/* const delta = new Delta().insert('A');\nconsole.log(delta.transform(2)); */\n\n/* const delta = new Delta().retain(2).insert('A');\nconsole.log(delta.transform(1)); */\n\n/* const delta = new Delta().retain(2).insert('A');\nconsole.log(delta.transform(2, true));\nconsole.log(delta.transform(2, false)); */\n\n/* const delta = new Delta().delete(2);\nconsole.log(delta.transform(4)); */\n\n/* const delta = new Delta().retain(4).delete(2);\nconsole.log(delta.transform(2)); */\n\n/* const delta = new Delta().retain(1).delete(4);\nconsole.log(delta.transform(2)); */\n\n/* const delta = new Delta().retain(2).insert('A').delete(2);\nconsole.log(delta.transform(4)); */\n\n/* const delta = new Delta().retain(2).insert('A').delete(4);\nconsole.log(delta.transform(4)); */\n\n/* const delta = new Delta().delete(1).retain(1).delete(4);\nconsole.log(delta.transform(4)); */\n\n/* const a1 = new Delta().insert('A');\nconst b1 = new Delta().insert('B');\nconst a2 = new Delta(a1);\nconst b2 = new Delta(b1);\n\nconsole.log(a1.transform(b1, true));\nconsole.log(a2.transform(b2, false)); */\n\n/* const a = new Delta().insert('A');\nconst b = new Delta().retain(1, { bold: true, color: 'red' });\nconsole.log(a.transform(b, true)); */\n\n/* const a = new Delta().insert('A');\nconst b = new Delta().delete(1);\nconsole.log(a.transform(b, true)); */\n\n/* const a = new Delta().delete(1);\nconst b = new Delta().insert('B');\nconsole.log(a.transform(b, true)); */\n\n/* const a = new Delta().delete(1);\nconst b = new Delta().retain(1, { bold: true, color: 'red' });\nconsole.log(a.transform(b, true)); */\n\n/* const a = new Delta().delete(1);\nconst b = new Delta().delete(1);\nconsole.log(a.transform(b, true)); */\n\n/* const a = new Delta().retain(1, { color: 'blue' });\nconst b = new Delta().insert('B');\nconsole.log(a.transform(b, true)); */\n\n/* const a1 = new Delta().retain(1, { color: 'blue' });\nconst b1 = new Delta().retain(1, { bold: true, color: 'red' });\nconsole.log(a1.transform(b1, true)); */\n\n/* const a2 = new Delta().retain(1, { color: 'blue' });\nconst b2 = new Delta().retain(1, { bold: true, color: 'red' });\nconsole.log(b2.transform(a2, true)); */\n\n/* const a1 = new Delta().retain(1, { color: 'blue' });\nconst b1 = new Delta().retain(1, { bold: true, color: 'red' });\nconst a2 = new Delta().retain(1, { color: 'blue' });\nconst b2 = new Delta().retain(1, { bold: true, color: 'red' });\nconsole.log(a1.transform(b1, false));\nconsole.log(b2.transform(a2, false)); */\n\n/* const a = new Delta().retain(1, { color: 'blue' });\nconst b = new Delta().delete(1);\nconsole.log(a.transform(b, true)); */\n\n/* const b1 = new Delta().retain(1).insert('e').delete(5).retain(1).insert('ow');\nconst a1 = new Delta().retain(2).insert('si').delete(5);\nconsole.log(a1.transform(b1, false)); */\n\n/* const a2 = new Delta(a1);\nconst b2 = new Delta(b1);\nconsole.log(b2.transform(a2, false)); */\n\n/* const a1 = new Delta().retain(3).insert('aa');\nconst b1 = new Delta().retain(3).insert('bb');\nconst a2 = new Delta(a1);\nconst b2 = new Delta(b1);\nconsole.log(a1.transform(b1, true));\nconsole.log(b2.transform(a2, false)); */\n\n/* const a1 = new Delta().insert('aa');\nconst b1 = new Delta().retain(3).insert('bb');\nconst a2 = new Delta(a1);\nconst b2 = new Delta(b1);\nconsole.log(a1.transform(b1, false));\nconsole.log(b2.transform(a2, false)); */\n\n/* const a1 = new Delta().retain(2).delete(1);\nconst b1 = new Delta().delete(3);\nconst a2 = new Delta(a1);\nconst b2 = new Delta(b1);\nconsole.log(a1.transform(b1, false));\nconsole.log(b2.transform(a2, false)); */\n\n/* const a1 = new Delta().insert('A');\n// const a2 = new Delta().insert('A');\nconst b1 = new Delta().insert('B');\n// const b2 = new Delta().insert('B');\nconsole.log(a1.transform(b1, true)); */\n/* expect(a1).toEqual(a2);\nexpect(b1).toEqual(b2); */\n"},"lineCount":null}},"error":null,"hash":"b9dd4d97863fd309a62dd74c74e43b01","cacheData":{"env":{}}}